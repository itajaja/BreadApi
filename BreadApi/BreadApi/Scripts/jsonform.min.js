(function (e, t, n, r, i) { if (e) { r = require("underscore") } var s = /\[([0-9]*)\](?=\[|\.|$)/g; var o = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g }; var u = { evaluate: /\{\[([\s\S]+?)\]\}/g, interpolate: /\{\{([\s\S]+?)\}\}/g }; var a = function (e) { return !(r.isUndefined(e) || r.isNull(e)) }; var f = { util: {} }; var l = function (e) { if (!a(e)) { return "" } e = "" + e; if (!e) { return "" } return e.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, "&").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;") }; var c = function (e) { return e.replace(/([ \!\"\#\$\%\&\'\(\)\*\+\,\.\/\:\;<\=\>\?\@\[\\\]\^\`\{\|\}\~])/g, "\\$1") }; var h = function (e) { var t = function (e, t) { t.find("> .active").removeClass("active"); e.addClass("active") }; var r = function (e, t) { e.find("input, textarea, select").removeAttr("disabled"); e.parent().children(":not([data-idx=" + t + "])").find("input, textarea, select").attr("disabled", "disabled") }; var i = function (e) { var i = n("option:selected", n(this)), s = n(this), o = i.get(0).getAttribute("data-idx") || i.attr("value"), u; e.preventDefault(); if (i.hasClass("active")) { return } u = n(this).parents(".tabbable").eq(0).find(".tab-content [data-idx=" + o + "]"); t(i, s); t(u, u.parent()); r(u, o) }; var s = function (e) { var i = n("a", n(this)); var s = n(this).parents(".tabbable").first().find(".tab-content").first(); var o = n(this).index(); var u = s.find("[data-idx=" + o + "]"); e.preventDefault(); t(n(this), n(this).parent()); t(u, u.parent()); if (n(this).parent().hasClass("jsonform-alternative")) { r(u, o) } }; e.each(function () { n(this).delegate("select.nav", "change", i); n(this).find("select.nav").each(function () { n(this).val(n(this).find(".active").attr("value")); var e = n(this).find("option:selected").get(0).getAttribute("data-idx") || n(this).find("option:selected").attr("value"); var t = n(this).parents(".tabbable").eq(0).find(".tab-content [data-idx=" + e + "]"); r(t, e) }); n(this).delegate("ul.nav li", "click", s); n(this).find("ul.nav li.active").click() }) }; f.fieldTemplate = function (e) { return '<div class="control-group jsonform-error-<%= keydash %>' + '<%= elt.htmlClass ? " " + elt.htmlClass : "" %>' + '<%= (node.schemaElement && node.schemaElement.required && (node.schemaElement.type !== "boolean") ? " jsonform-required" : "") %>' + '<%= (node.readOnly ? " jsonform-readonly" : "") %>' + '<%= (node.disabled ? " jsonform-disabled" : "") %>' + '">' + "<% if (node.title && !elt.notitle) { %>" + '<label class="control-label" for="<%= node.id %>"><%= node.title %></label>' + "<% } %>" + '<div class="controls">' + "<% if (node.prepend || node.append) { %>" + '<div class="<% if (node.prepend) { %>input-prepend<% } %>' + '<% if (node.append) { %> input-append<% } %>">' + "<% if (node.prepend) { %>" + '<span class="add-on"><%= node.prepend %></span>' + "<% } %>" + "<% } %>" + e + "<% if (node.append) { %>" + '<span class="add-on"><%= node.append %></span>' + "<% } %>" + "<% if (node.prepend || node.append) { %>" + "</div>" + "<% } %>" + "<% if (node.description) { %>" + '<span class="help-inline"><%= node.description %></span>' + "<% } %>" + '<span class="help-block jsonform-errortext" style="display:none;"></span>' + "</div></div>" }; var p = '<div class="_jsonform-preview">' + '<% if (value.type=="image") { %>' + '<img class="jsonform-preview" id="jsonformpreview-<%= id %>" src="<%= value.url %>" />' + "<% } else { %>" + '<a href="<%= value.url %>"><%= value.name %></a> (<%= Math.ceil(value.size/1024) %>kB)' + "<% } %>" + "</div>" + '<a href="#" class="btn _jsonform-delete"><i class="icon-remove" title="Remove"></i></a> '; var d = function (e) { return { template: '<input type="' + e + '" ' + '<%= (fieldHtmlClass ? "class=\'" + fieldHtmlClass + "\' " : "") %>' + 'name="<%= node.name %>" value="<%= escape(value) %>" id="<%= id %>"' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.readOnly ? " readonly=\'readonly\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.maxLength ? " maxlength=\'" + node.schemaElement.maxLength + "\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.required && (node.schemaElement.type !== "boolean") ? " required=\'required\'" : "") %>' + '<%= (node.placeholder? "placeholder=" + \'"\' + escape(node.placeholder) + \'"\' : "")%>' + " />", fieldtemplate: true, inputfield: true } }; f.elementTypes = { none: { template: "" }, root: { template: "<div><%= children %></div>" }, text: d("text"), password: d("password"), date: d("date"), datetime: d("datetime"), "datetime-local": d("datetime-local"), email: d("email"), month: d("month"), number: d("number"), search: d("search"), tel: d("tel"), time: d("time"), url: d("url"), week: d("week"), range: { template: '<input type="range" ' + '<%= (fieldHtmlClass ? "class=\'" + fieldHtmlClass + "\' " : "") %>' + 'name="<%= node.name %>" value="<%= escape(value) %>" id="<%= id %>"' + '<%= (node.disabled? " disabled" : "")%>' + " min=<%= range.min %>" + " max=<%= range.max %>" + " step=<%= range.step %>" + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + " />", fieldtemplate: true, inputfield: true, onBeforeRender: function (e, t) { e.range = { min: 1, max: 100, step: 1 }; if (!t || !t.schemaElement) return; if (t.formElement && t.formElement.step) { e.range.step = t.formElement.step } if (typeof t.schemaElement.minimum !== "undefined") { if (t.schemaElement.exclusiveMinimum) { e.range.min = t.schemaElement.minimum + e.range.step } else { e.range.min = t.schemaElement.minimum } } if (typeof t.schemaElement.maximum !== "undefined") { if (t.schemaElement.exclusiveMaximum) { e.range.max = t.schemaElement.maximum + e.range.step } else { e.range.max = t.schemaElement.maximum } } } }, color: { template: '<input type="text" ' + '<%= (fieldHtmlClass ? "class=\'" + fieldHtmlClass + "\' " : "") %>' + 'name="<%= node.name %>" value="<%= escape(value) %>" id="<%= id %>"' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + " />", fieldtemplate: true, inputfield: true, onInsert: function (e, t) { n(t.el).find("#" + c(t.id)).spectrum({ preferredFormat: "hex", showInput: true }) } }, textarea: { template: '<textarea id="<%= id %>" name="<%= node.name %>" ' + 'style="height:<%= elt.height || "150px" %>;width:<%= elt.width || "100%" %>;"' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.readOnly ? " readonly=\'readonly\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.maxLength ? " maxlength=\'" + node.schemaElement.maxLength + "\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + '<%= (node.placeholder? "placeholder=" + \'"\' + escape(node.placeholder) + \'"\' : "")%>' + "><%= value %></textarea>", fieldtemplate: true, inputfield: true }, wysihtml5: { template: '<textarea id="<%= id %>" name="<%= node.name %>" style="height:<%= elt.height || "300px" %>;width:<%= elt.width || "100%" %>;"' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.readOnly ? " readonly=\'readonly\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.maxLength ? " maxlength=\'" + node.schemaElement.maxLength + "\'" : "") %>' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + '<%= (node.placeholder? "placeholder=" + \'"\' + escape(node.placeholder) + \'"\' : "")%>' + "><%= value %></textarea>", fieldtemplate: true, inputfield: true, onInsert: function (e, t) { var r = function () { if (n(t.el).data("wysihtml5")) return; n(t.el).data("wysihtml5_loaded", true); n(t.el).find("#" + c(t.id)).wysihtml5({ html: true, link: true, "font-styles": true, image: true, events: { load: function () { n(this.textareaElement).removeAttr("required") } } }) }; if (window.jsonform_wysihtml5_setup) { window.jsonform_wysihtml5_setup(r); return } var i = window.setInterval(function () { if (window.wysihtml5) { window.clearInterval(i); r() } }, 1e3) } }, ace: { template: '<div id="<%= id %>" style="position:relative;height:<%= elt.height || "300px" %>;"><div id="<%= id %>__ace" style="width:<%= elt.width || "100%" %>;height:<%= elt.height || "300px" %>;"></div><input type="hidden" name="<%= node.name %>" id="<%= id %>__hidden" value="<%= escape(value) %>"/></div>', fieldtemplate: true, inputfield: true, onInsert: function (e, t) { var i = function () { var e = t.formElement || {}; var i = window.ace; var s = i.edit(n(t.el).find("#" + c(t.id) + "__ace").get(0)); var o = "#" + c(t.id) + "__hidden"; s.getSession().setNewLineMode("unix"); s.renderer.setShowPrintMargin(false); s.setTheme("ace/theme/" + (e.aceTheme || "twilight")); if (e.aceMode) { s.getSession().setMode("ace/mode/" + e.aceMode) } s.getSession().setTabSize(2); s.getSession().setValue(t.value || ""); var u = r.debounce(function () { n(t.el).find(o).val(s.getSession().getValue()); n(t.el).find(o).change() }, 600); s.getSession().on("change", u); s.on("blur", function () { n(t.el).find(o).change(); n(t.el).find(o).trigger("blur") }); s.on("focus", function () { n(t.el).find(o).trigger("focus") }) }; if (window.jsonform_ace_setup) { window.jsonform_ace_setup(i); return } var s = window.setInterval(function () { if (window.ace) { window.clearInterval(s); i() } }, 1e3) } }, checkbox: { template: '<label class="checkbox"><input type="checkbox" id="<%= id %>" ' + 'name="<%= node.name %>" value="1" <% if (value) {%>checked<% } %>' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.schemaElement && node.schemaElement.required && (node.schemaElement.type !== "boolean") ? " required=\'required\'" : "") %>' + ' /><span><%= node.inlinetitle || "" %></span>' + "</label>", fieldtemplate: true, inputfield: true, getElement: function (e) { return n(e).parent().get(0) } }, file: { template: '<input class="input-file" id="<%= id %>" name="<%= node.name %>" type="file" ' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + "/>", fieldtemplate: true, inputfield: true }, "file-hosted-public": { template: "<span><% if (value && (value.type||value.url)) { %>" + p + '<% } %><input class="input-file" id="_transloadit_<%= id %>" type="file" name="<%= transloaditname %>" /><input data-transloadit-name="_transloadit_<%= transloaditname %>" type="hidden" id="<%= id %>" name="<%= node.name %>" value=\'<%= escape(JSON.stringify(node.value)) %>\' /></span>', fieldtemplate: true, inputfield: true, getElement: function (e) { return n(e).parent().get(0) }, onBeforeRender: function (e, t) { if (!t.ownerTree._transloadit_generic_public_index) { t.ownerTree._transloadit_generic_public_index = 1 } else { t.ownerTree._transloadit_generic_public_index++ } e.transloaditname = "_transloadit_jsonform_genericupload_public_" + t.ownerTree._transloadit_generic_public_index; if (!t.ownerTree._transloadit_generic_elts) t.ownerTree._transloadit_generic_elts = {}; t.ownerTree._transloadit_generic_elts[e.transloaditname] = t }, onChange: function (e, t) { if (t.ownerTree._transloadit_bound) { return false } t.ownerTree._transloadit_bound = true; var s = n(t.ownerTree.domRoot); s.transloadit({ autoSubmit: false, wait: true, onSuccess: function (e) { var n = r.values(e.results); n = r.flatten(n); r.each(n, function (e) { var n = t.ownerTree._transloadit_generic_elts[e.field].id; var o = s.find("#" + c(n)); var u = r.filter(r.keys(e.meta), function (t) { return !!a(e.meta[t]) }); e.meta = r.pick(e.meta, u); o.val(i.stringify(e)) }); t.ownerTree._transloadit_bound = false; s.unbind("submit.transloadit"); r.delay(function () { console.log("submit form"); t.ownerTree.submit() }, 10) }, onError: function (e) { console.log("assembly error", e) } }) }, onInsert: function (e, t) { n(t.el).find("a._jsonform-delete").on("click", function (e) { n(t.el).find("._jsonform-preview").remove(); n(t.el).find("a._jsonform-delete").remove(); n(t.el).find("#" + c(t.id)).val(""); e.preventDefault(); return false }) }, onSubmit: function (e, t) { if (t.ownerTree._transloadit_bound) { return false } return true } }, "file-transloadit": { template: "<span><% if (value && (value.type||value.url)) { %>" + p + '<% } %><input class="input-file" id="_transloadit_<%= id %>" type="file" name="_transloadit_<%= node.name %>" /><input type="hidden" id="<%= id %>" name="<%= node.name %>" value=\'<%= escape(JSON.stringify(node.value)) %>\' /></span>', fieldtemplate: true, inputfield: true, getElement: function (e) { return n(e).parent().get(0) }, onChange: function (e, t) { if (t.ownerTree._transloadit_bound) { return false } t.ownerTree._transloadit_bound = true; var s = n(t.ownerTree.domRoot); s.transloadit({ autoSubmit: false, wait: true, onSuccess: function (e) { var n = r.values(e.results); n = r.flatten(n); r.each(n, function (e) { var t = s.find('input[name="' + e.field.replace(/^_transloadit_/, "") + '"]'); var n = r.filter(r.keys(e.meta), function (t) { return !!a(e.meta[t]) }); e.meta = r.pick(e.meta, n); t.val(i.stringify(e)) }); t.ownerTree._transloadit_bound = false; s.unbind("submit.transloadit"); r.delay(function () { console.log("submit form"); t.ownerTree.submit() }, 10) }, onError: function (e) { console.log("assembly error", e) } }) }, onInsert: function (e, t) { n(t.el).find("a._jsonform-delete").on("click", function (e) { n(t.el).find("._jsonform-preview").remove(); n(t.el).find("a._jsonform-delete").remove(); n(t.el).find("#" + c(t.id)).val(""); e.preventDefault(); return false }) }, onSubmit: function (e, t) { if (t.ownerTree._transloadit_bound) { return false } return true } }, select: { template: '<select name="<%= node.name %>" id="<%= id %>"' + '<%= (fieldHtmlClass ? " class=\'" + fieldHtmlClass + "\'" : "") %>' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + "> " + '<% _.each(node.options, function(key, val) { if(key instanceof Object) { if (value === key.value) { %> <option selected value="<%= key.value %>"><%= key.title %></option> <% } else { %> <option value="<%= key.value %>"><%= key.title %></option> <% }} else { if (value === key) { %> <option selected value="<%= key %>"><%= key %></option> <% } else { %><option value="<%= key %>"><%= key %></option> <% }}}); %> ' + "</select>", fieldtemplate: true, inputfield: true }, imageselect: { template: "<div>" + '<input type="hidden" name="<%= node.name %>" id="<%= node.id %>" value="<%= value %>" />' + '<div class="dropdown">' + '<a class="btn<% if (buttonClass && node.value) { %> <%= buttonClass %><% } %>" data-toggle="dropdown" href="#"<% if (node.value) { %> style="max-width:<%= width %>px;max-height:<%= height %>px"<% } %>>' + '<% if (node.value) { %><img src="<% if (!node.value.match(/^https?:/)) { %><%= prefix %><% } %><%= node.value %><%= suffix %>" alt="" /><% } else { %><%= buttonTitle %><% } %>' + "</a>" + '<div class="dropdown-menu navbar" id="<%= node.id %>_dropdown">' + "<div>" + '<% _.each(node.options, function(key, idx) { if ((idx > 0) && ((idx % columns) === 0)) { %></div><div><% } %><a class="btn<% if (buttonClass) { %> <%= buttonClass %><% } %>" style="max-width:<%= width %>px;max-height:<%= height %>px"><% if (key instanceof Object) { %><img src="<% if (!key.value.match(/^https?:/)) { %><%= prefix %><% } %><%= key.value %><%= suffix %>" alt="<%= key.title %>" /></a><% } else { %><img src="<% if (!key.match(/^https?:/)) { %><%= prefix %><% } %><%= key %><%= suffix %>" alt="" /><% } %></a> <% }); %>' + "</div>" + '<div class="pagination-right"><a class="btn">Reset</a></div>' + "</div>" + "</div>" + "</div>", fieldtemplate: true, inputfield: true, onBeforeRender: function (e, t) { var n = t.formElement || {}; var r = null; var i = n.imageSelectorColumns || 5; e.buttonTitle = n.imageSelectorTitle || "Select..."; e.prefix = n.imagePrefix || ""; e.suffix = n.imageSuffix || ""; e.width = n.imageWidth || 32; e.height = n.imageHeight || 32; e.buttonClass = n.imageButtonClass || false; if (t.options.length > i) { r = Math.ceil(t.options.length / i); e.columns = Math.ceil(t.options.length / r) } else { e.columns = i } }, getElement: function (e) { return n(e).parent().get(0) }, onInsert: function (e, t) { n(t.el).on("click", ".dropdown-menu a", function (e) { e.preventDefault(); e.stopPropagation(); var r = e.target.nodeName.toLowerCase() === "img" ? n(e.target) : n(e.target).find("img"); var i = r.attr("src"); var s = t.formElement || {}; var o = s.imagePrefix || ""; var u = s.imageSuffix || ""; var a = s.imageWidth || 32; var f = s.imageHeight || 32; if (i) { if (i.indexOf(o) === 0) { i = i.substring(o.length) } i = i.substring(0, i.length - u.length); n(t.el).find("input").attr("value", i); n(t.el).find('a[data-toggle="dropdown"]').addClass(s.imageButtonClass).attr("style", "max-width:" + a + "px;max-height:" + f + "px").html('<img src="' + (!i.match(/^https?:/) ? o : "") + i + u + '" alt="" />') } else { n(t.el).find("input").attr("value", ""); n(t.el).find('a[data-toggle="dropdown"]').removeClass(s.imageButtonClass).removeAttr("style").html(s.imageSelectorTitle || "Select...") } }) } }, radios: { template: '<div id="<%= node.id %>"><% _.each(node.options, function(key, val) { %><label class="radio"><input type="radio" <% if (((key instanceof Object) && (value === key.value)) || (value === key)) { %> checked="checked" <% } %> name="<%= node.name %>" value="<%= (key instanceof Object ? key.value : key) %>"' + '<%= (node.disabled? " disabled" : "")%>' + '<%= (node.schemaElement && node.schemaElement.required ? " required=\'required\'" : "") %>' + "/><span><%= (key instanceof Object ? key.title : key) %></span></label> <% }); %></div>", fieldtemplate: true, inputfield: true }, radiobuttons: { template: '<div id="<%= node.id %>">' + "<% _.each(node.options, function(key, val) { %>" + '<label class="radio btn">' + '<input type="radio" style="position:absolute;left:-9999px;" ' + '<% if (((key instanceof Object) && (value === key.value)) || (value === key)) { %> checked="checked" <% } %> name="<%= node.name %>" value="<%= (key instanceof Object ? key.value : key) %>" />' + "<span><%= (key instanceof Object ? key.title : key) %></span></label> " + "<% }); %>" + "</div>", fieldtempate: true, inputfield: true, onInsert: function (e, t) { var r = "active"; var i = t.formElement || {}; if (i.activeClass) { r += " " + i.activeClass } n(t.el).find("label").on("click", function () { n(this).parent().find("label").removeClass(r); n(this).addClass(r) }) } }, checkboxes: { template: "<div><%= choiceshtml %></div>", fieldtemplate: true, inputfield: true, onBeforeRender: function (e, t) { var n = null; var i = null; var s = '<label class="checkbox">' + '<input type="checkbox" <% if (value) { %> checked="checked" <% } %> name="<%= name %>" value="1"' + '<%= (node.disabled? " disabled" : "")%>' + "/><span><%= title %></span></label>"; if (!t || !t.schemaElement || !t.schemaElement.items) return; n = t.schemaElement.items["enum"] || t.schemaElement.items[0]["enum"]; if (!n) return; i = ""; r.each(n, function (e, n) { i += r.template(s, { name: t.key + "[" + n + "]", value: r.include(t.value, e), title: t.formElement.titleMap ? t.formElement.titleMap[e] : e, node: t }, o) }); e.choiceshtml = i } }, array: { template: '<div id="<%= id %>"><ul class="_jsonform-array-ul" style="list-style-type:none;"><%= children %></ul>' + '<span class="_jsonform-array-buttons">' + '<a href="#" class="btn _jsonform-array-addmore"><i class="icon-plus-sign" title="Add new"></i></a> ' + '<a href="#" class="btn _jsonform-array-deletelast"><i class="icon-minus-sign" title="Delete last"></i></a>' + "</span>" + "</div>", fieldtemplate: true, array: true, childTemplate: function (e) { if (n("").sortable) { return '<li data-idx="<%= node.childPos %>">' + '<span class="draggable line"><i class="icon-list" title="Move item"></i></span>' + e + "</li>" } else { return '<li data-idx="<%= node.childPos %>">' + e + "</li>" } }, onInsert: function (e, t) { var r = n(t.el).find("#" + c(t.id)); var i = t.getArrayBoundaries(); var s = function (e, i) { if (e === i) return; var s = e < i ? 1 : -1; var o = 0; var u = n("> ul", r); for (o = e; o !== i; o += s) { t.children[o].switchValuesWith(t.children[o + s]); t.children[o].render(u.get(0)); t.children[o + s].render(u.get(0)) } var a = n(t.children[e].el); var f = n(t.children[i].el); a.detach(); f.detach(); if (e < i) { if (e === 0) u.prepend(a); else n(t.children[e - 1].el).after(a); n(t.children[i - 1].el).after(f) } else { if (i === 0) u.prepend(f); else n(t.children[i - 1].el).after(f); n(t.children[e - 1].el).after(a) } }; n("> span > a._jsonform-array-addmore", r).click(function (e) { e.preventDefault(); e.stopPropagation(); var s = t.children.length; if (i.maxItems >= 0) { if (t.children.length > i.maxItems - 2) { r.find("> span > a._jsonform-array-addmore").addClass("disabled") } if (t.children.length > i.maxItems - 1) { return false } } t.insertArrayItem(s, n("> ul", r).get(0)); if (i.minItems <= 0 || i.minItems > 0 && t.children.length > i.minItems - 1) { r.find("> span > a._jsonform-array-deletelast").removeClass("disabled") } }); var o = n("> ul > li", r).length; if (i.minItems > 0 && o < i.minItems) { for (var u = 0; u < i.minItems - 1 && r.find("> ul > li").length < i.minItems; u++) { t.insertArrayItem(o, r.find("> ul").get(0)) } } if (i.minItems > 0 && t.children.length <= i.minItems) { r.find("> span > a._jsonform-array-deletelast").addClass("disabled") } n("> span > a._jsonform-array-deletelast", r).click(function (e) { var n = t.children.length - 1; e.preventDefault(); e.stopPropagation(); if (i.minItems > 0) { if (t.children.length < i.minItems + 2) { r.find("> span > a._jsonform-array-deletelast").addClass("disabled") } if (t.children.length <= i.minItems) { return false } } else if (t.children.length === 1) { r.find("> span > a._jsonform-array-deletelast").addClass("disabled") } t.deleteArrayItem(n); if (i.maxItems >= 0 && n <= i.maxItems - 1) { r.find("> span > a._jsonform-array-addmore").removeClass("disabled") } }); if (n(t.el).sortable) { n("> ul", r).sortable(); n("> ul", r).bind("sortstop", function (e, t) { var r = n(t.item).data("idx"); var i = n(t.item).index(); s(r, i) }) } } }, tabarray: { template: '<div id="<%= id %>"><div class="tabbable tabs-left">' + '<ul class="nav nav-tabs">' + "<%= tabs %>" + "</ul>" + '<div class="tab-content">' + "<%= children %>" + "</div>" + "</div>" + '<a href="#" class="btn _jsonform-array-addmore"><i class="icon-plus-sign" title="Add new"></i></a> ' + '<a href="#" class="btn _jsonform-array-deleteitem"><i class="icon-minus-sign" title="Delete item"></i></a></div>', fieldtemplate: true, array: true, childTemplate: function (e) { return '<div data-idx="<%= node.childPos %>" class="tab-pane">' + e + "</div>" }, onBeforeRender: function (e, t) { var n = ""; r.each(t.children, function (e, t) { var r = e.legend || e.title || "Item " + (t + 1); n += '<li data-idx="' + t + '"' + (t === 0 ? ' class="active"' : "") + '><a class="draggable tab" data-toggle="tab">' + l(r) + "</a></li>" }); e.tabs = n }, onInsert: function (e, t) { var i = n(t.el).find("#" + c(t.id)); var s = t.getArrayBoundaries(); var o = function (e, r) { if (e === r) return; var s = e < r ? 1 : -1; var o = 0; var u = n("> .tabbable > .tab-content", i).get(0); for (o = e; o !== r; o += s) { t.children[o].switchValuesWith(t.children[o + s]); t.children[o].render(u); t.children[o + s].render(u) } }; var u = function (e) { var s = ""; var o = false; if (e === undefined) { e = n("> .tabbable > .nav-tabs .active", i).data("idx"); if (e) { e = parseInt(e, 10) } else { o = true; e = 0 } } if (e >= t.children.length) { e = t.children.length - 1 } r.each(t.children, function (e, t) { var n = e.legend || e.title || "Item " + (t + 1); s += '<li data-idx="' + t + '">' + '<a class="draggable tab" data-toggle="tab">' + l(n) + "</a></li>" }); n("> .tabbable > .nav-tabs", i).html(s); if (o) { n('> .tabbable > .nav-tabs [data-idx="0"]', i).addClass("active") } n('> .tabbable > .nav-tabs [data-toggle="tab"]', i).eq(e).click() }; n("> a._jsonform-array-deleteitem", i).click(function (e) { var r = n("> .tabbable > .nav-tabs .active", i).data("idx"); e.preventDefault(); e.stopPropagation(); if (s.minItems > 0) { if (t.children.length < s.minItems + 1) { i.find("> a._jsonform-array-deleteitem").addClass("disabled") } if (t.children.length <= s.minItems) return false } t.deleteArrayItem(r); u(); if (t.children.length < s.minItems + 1 || t.children.length === 0) { i.find("> a._jsonform-array-deleteitem").addClass("disabled") } if (s.maxItems >= 0 && t.children.length <= s.maxItems) { i.find("> a._jsonform-array-addmore").removeClass("disabled") } }); n("> a._jsonform-array-addmore", i).click(function (e) { var r = t.children.length; if (s.maxItems >= 0) { if (t.children.length > s.maxItems - 2) { n("> a._jsonform-array-addmore", i).addClass("disabled") } if (t.children.length > s.maxItems - 1) { return false } } e.preventDefault(); e.stopPropagation(); t.insertArrayItem(r, i.find("> .tabbable > .tab-content").get(0)); u(r); if (s.minItems <= 0 || s.minItems > 0 && r > s.minItems - 1) { i.find("> a._jsonform-array-deleteitem").removeClass("disabled") } }); n(t.el).on("legendUpdated", function (e) { u(); e.preventDefault(); e.stopPropagation() }); if (n(t.el).sortable) { n("> .tabbable > .nav-tabs", i).sortable({ containment: t.el, tolerance: "pointer" }); n("> .tabbable > .nav-tabs", i).bind("sortstop", function (e, t) { var r = n(t.item).data("idx"); var i = n(t.item).index(); o(r, i); u(i) }) } if (s.minItems >= 0) { for (var a = 0; a < s.minItems - 1; a++) { i.find("> a._jsonform-array-addmore").click() } i.find("> a._jsonform-array-deleteitem").addClass("disabled"); u() } if (s.maxItems >= 0 && t.children.length >= s.maxItems) { i.find("> a._jsonform-array-addmore").addClass("disabled") } if (s.minItems >= 0 && t.children.length <= s.minItems) { i.find("> a._jsonform-array-deleteitem").addClass("disabled") } } }, help: { template: '<span class="help-block" style="padding-top:5px"><%= elt.helpvalue %></span>', fieldtemplate: true }, msg: { template: "<%= elt.msg %>" }, fieldset: { template: '<fieldset class="control-group jsonform-error-<%= keydash %> <% if (elt.expandable) { %>expandable<% } %> <%= elt.htmlClass?elt.htmlClass:"" %>" ' + '<% if (id) { %> id="<%= id %>"<% } %>' + ">" + "<% if (node.title || node.legend) { %><legend><%= node.title || node.legend %></legend><% } %>" + '<% if (elt.expandable) { %><div class="control-group"><% } %>' + "<%= children %>" + "<% if (elt.expandable) { %></div><% } %>" + "</fieldset>" }, advancedfieldset: { template: "<fieldset" + '<% if (id) { %> id="<%= id %>"<% } %>' + ' class="expandable <%= elt.htmlClass?elt.htmlClass:"" %>">' + "<legend>Advanced options</legend>" + '<div class="control-group">' + "<%= children %>" + "</div>" + "</fieldset>" }, authfieldset: { template: "<fieldset" + '<% if (id) { %> id="<%= id %>"<% } %>' + ' class="expandable <%= elt.htmlClass?elt.htmlClass:"" %>">' + "<legend>Authentication settings</legend>" + '<div class="control-group">' + "<%= children %>" + "</div>" + "</fieldset>" }, submit: { template: '<input type="submit" <% if (id) { %> id="<%= id %>" <% } %> class="btn btn-primary <%= elt.htmlClass?elt.htmlClass:"" %>" value="<%= value || node.title %>"<%= (node.disabled? " disabled" : "")%>/>' }, button: { template: ' <button <% if (id) { %> id="<%= id %>" <% } %> class="btn <%= elt.htmlClass?elt.htmlClass:"" %>"><%= node.title %></button> ' }, actions: { template: '<div class="form-actions <%= elt.htmlClass?elt.htmlClass:"" %>"><%= children %></div>' }, hidden: { template: '<input type="hidden" id="<%= id %>" name="<%= node.name %>" value="<%= escape(value) %>" />', inputfield: true }, selectfieldset: { template: '<fieldset class="tab-container <%= elt.htmlClass?elt.htmlClass:"" %>">' + "<% if (node.legend) { %><legend><%= node.legend %></legend><% } %>" + '<% if (node.formElement.key) { %><input type="hidden" id="<%= node.id %>" name="<%= node.name %>" value="<%= escape(value) %>" /><% } else { %>' + '<a id="<%= node.id %>"></a><% } %>' + '<div class="tabbable">' + '<div class="control-group<%= node.formElement.hideMenu ? " hide" : "" %>">' + '<% if (node.title && !elt.notitle) { %><label class="control-label" for="<%= node.id %>"><%= node.title %></label><% } %>' + '<div class="controls"><%= tabs %></div>' + "</div>" + '<div class="tab-content">' + "<%= children %>" + "</div>" + "</div>" + "</fieldset>", inputfield: true, getElement: function (e) { return n(e).parent().get(0) }, childTemplate: function (e) { return '<div data-idx="<%= node.childPos %>" class="tab-pane' + '<% if (node.active) { %> active<% } %>">' + e + "</div>" }, onBeforeRender: function (e, t) { var n = null; var i = []; if (t.schemaElement) { i = t.schemaElement["enum"] || [] } if (t.options) { n = r.map(t.options, function (e, n) { var s = t.children[n]; if (e instanceof Object) { e = r.extend({ node: s }, e); e.title = e.title || s.legend || s.title || "Option " + (s.childPos + 1); e.value = a(e.value) ? e.value : a(i[n]) ? i[n] : n; return e } else { return { title: e, value: a(i[s.childPos]) ? i[s.childPos] : s.childPos, node: s } } }) } else { n = r.map(t.children, function (e, t) { return { title: e.legend || e.title || "Option " + (e.childPos + 1), value: i[e.childPos] || e.childPos, node: e } }) } var s = null; if (e.value) { s = r.find(n, function (e) { return e.value === t.value }) } if (!s) { s = r.find(n, function (e) { return e.node.hasNonDefaultValue() }) } if (!s) { s = n[0] } s.node.active = true; e.value = s.value; var o = t.formElement; var u = '<select class="nav"' + (t.disabled ? " disabled" : "") + ">"; r.each(n, function (e, t) { u += '<option data-idx="' + t + '" value="' + e.value + '"' + (e.node.active ? ' class="active"' : "") + ">" + l(e.title) + "</option>" }); u += "</select>"; e.tabs = u; return e }, onInsert: function (e, t) { n(t.el).find("select.nav").first().on("change", function (e) { var r = n(this).find("option:selected"); n(t.el).find('input[type="hidden"]').first().val(r.attr("value")) }) } }, optionfieldset: { template: "<div" + '<% if (node.id) { %> id="<%= node.id %>"<% } %>' + ">" + "<%= children %>" + "</div>" }, section: { template: "<div" + '<% if (node.id) { %> id="<%= node.id %>"<% } %>' + "><%= children %></div>" }, questions: { template: "<div>" + '<input type="hidden" id="<%= node.id %>" name="<%= node.name %>" value="<%= escape(value) %>" />' + "<%= children %>" + "</div>", fieldtempate: true, inputfield: true, getElement: function (e) { return n(e).parent().get(0) }, onInsert: function (e, t) { if (!t.children || t.children.length === 0) return; r.each(t.children, function (e) { n(e.el).hide() }); n(t.children[0].el).show() } }, question: { template: '<div id="<%= node.id %>"><% _.each(node.options, function(key, val) { %><label class="radio<%= (node.formElement.optionsType === "radiobuttons") ? " btn" : "" %><%= ((key instanceof Object && key.htmlClass) ? " " + key.htmlClass : "") %>"><input type="radio" <% if (node.formElement.optionsType === "radiobuttons") { %> style="position:absolute;left:-9999px;" <% } %>name="<%= node.id %>" value="<%= val %>"<%= (node.disabled? " disabled" : "")%>/><span><%= (key instanceof Object ? key.title : key) %></span></label> <% }); %></div>', fieldtemplate: true, onInsert: function (e, t) { var i = "active"; var s = t.formElement || {}; if (s.activeClass) { i += " " + s.activeClass } n(t.el).find('input[type="radio"]').on("change", function (e) { var s = null; var o = t.options[n(this).val()]; if (!t.parentNode || !t.parentNode.el) return; n(this).parent().parent().find("label").removeClass(i); n(this).parent().addClass(i); n(t.el).nextAll().hide(); n(t.el).nextAll().find('input[type="radio"]').prop("checked", false); if (o.value) { n(t.parentNode.el).find('input[type="hidden"]').val(o.value) } if (o.next) { s = r.find(t.parentNode.children, function (e) { return e.formElement && e.formElement.qid === o.next }); n(s.el).show(); n(s.el).nextAll().hide(); n(s.el).nextAll().find('input[type="radio"]').prop("checked", false) } if (o.href) { if (o.target) { window.open(o.href, o.target) } else { window.location = o.href } } if (o.submit) { setTimeout(function () { t.ownerTree.submit() }, 0) } }) } } }; f.util.getObjKey = function (e, t, n) { var i = e; var o = t.split("."); var u = null; var a = null; var f = null; for (var l = 0; l < o.length; l++) { if (i === null || typeof i !== "object") return null; u = o[l]; f = u.replace(s, ""); s.lastIndex = 0; a = s.exec(u); if (a) { while (true) { if (!r.isArray(i[f])) return null; i = i[f][parseInt(a[1], 10)]; a = s.exec(u); if (!a) break } } else if (n && !i[f] && r.isArray(i) && i[0]) { i = i[0][f] } else { i = i[f] } } if (n && r.isArray(i) && i[0]) { return i[0] } else { return i } }; f.util.setObjKey = function (e, t, n) { var i = e; var o = t.split("."); var u = null; var a = null; var f = null; for (var l = 0; l < o.length - 1; l++) { u = o[l]; f = u.replace(s, ""); s.lastIndex = 0; a = s.exec(u); if (a) { while (true) { if (!r.isArray(i[f])) { i[f] = [] } i = i[f]; f = parseInt(a[1], 10); a = s.exec(u); if (!a) break } if (typeof i[f] !== "object" || i[f] === null) { i[f] = {} } i = i[f] } else { if (typeof i[f] !== "object" || i[f] === null) { i[f] = {} } i = i[f] } } u = o[o.length - 1]; f = u.replace(s, ""); s.lastIndex = 0; a = s.exec(u); if (a) { while (true) { if (!r.isArray(i[f])) { i[f] = [] } i = i[f]; f = parseInt(a[1], 10); a = s.exec(u); if (!a) break } i[f] = n } else { i[f] = n } }; var v = function (e, t) { var n = t.replace(/\./g, ".properties.").replace(/\[[0-9]*\]/g, ".items"); var r = f.util.getObjKey(e, n, true); if (r && r.$ref) { throw new Error("JSONForm does not yet support schemas that use the " + "$ref keyword. See: https://github.com/joshfire/jsonform/issues/54") } return r }; var m = function (e, t) { var n = 0; var r = 0; if (!e) return null; if (t > 0) { while (n < t) { r = e.indexOf("[]", r); if (r === -1) { return e } r = r + 2; n += 1 } } r = e.indexOf("[]", r); if (r === -1) return e; else return e.substring(0, r) }; var g = function (e, t) { var n = 0; if (!e) return null; if (!t || t.length === 0) return e; var r = e.replace(s, function (e, r) { var i = e; if (a(t[n])) { i = "[" + t[n] + "]" } n += 1; return i }); return r }; var y = function (e, t, n, i, s) { var o = null; i = i || {}; i.idx = i.idx || (n ? n[n.length - 1] : 1); i.value = a(i.value) ? i.value : ""; i.getValue = i.getValue || function (t) { return y(e, t, n, i, s) }; var l = function (e, t) { var n = null; if (!e || !e.length) return null; r.each(e, function (e) { if (n) return; if (e === t) { n = { key: e }; return } if (r.isString(e)) return; if (e.key === t) { n = e } else if (e.items) { n = l(e.items, t) } }); return n }; var c = l(e.form || [], t); var h = v(e.schema.properties, t); if (s && e.value) { o = f.util.getObjKey(e.value, g(t, n)) } if (!a(o)) { if (c && typeof c["value"] !== "undefined") { o = c["value"] } else if (h) { if (a(h["default"])) { o = h["default"] } } if (o && o.indexOf("{{values.") !== -1) { o = o.replace(/\{\{values\.([^\}]+)\}\}/g, '{{getValue("$1")}}') } if (o) { o = r.template(o, i, u) } } if (a(o) && c && c.titleMap && c.titleMap[o]) { o = r.template(c.titleMap[o], i, u) } if (o && r.isString(o) && h && h.maxLength) { if (o.length > h.maxLength) { o = o.substr(0, h.maxLength - 1) + "…" } } if (!a(o)) { return null } else { return o } }; var b = function () { this.id = null; this.key = null; this.el = null; this.formElement = null; this.schemaElement = null; this.view = null; this.children = []; this.ownerTree = null; this.parentNode = null; this.childTemplate = null; this.legendChild = null; this.arrayPath = []; this.childPos = 0 }; b.prototype.clone = function (e) { var t = new b; t.arrayPath = r.clone(this.arrayPath); t.ownerTree = this.ownerTree; t.parentNode = e || this.parentNode; t.formElement = this.formElement; t.schemaElement = this.schemaElement; t.view = this.view; t.children = r.map(this.children, function (e) { return e.clone(t) }); if (this.childTemplate) { t.childTemplate = this.childTemplate.clone(t) } return t }; b.prototype.hasNonDefaultValue = function () { if (this.formElement && this.formElement.type == "hidden") { return false } if (this.value && !this.defaultValue) { return true } var e = r.find(this.children, function (e) { return e.hasNonDefaultValue() }); return !!e }; b.prototype.appendChild = function (e) { e.parentNode = this; e.childPos = this.children.length; this.children.push(e); return e }; b.prototype.removeChild = function () { var e = this.children[this.children.length - 1]; if (!e) return; n(e.el).remove(); return this.children.pop() }; b.prototype.moveValuesTo = function (e) { var t = this.getFormValues(e.arrayPath); e.resetValues(); e.computeInitialValues(t, true) }; b.prototype.switchValuesWith = function (e) { var t = this.getFormValues(e.arrayPath); var n = e.getFormValues(this.arrayPath); e.resetValues(); e.computeInitialValues(t, true); this.resetValues(); this.computeInitialValues(n, true) }; b.prototype.resetValues = function () { var e = null; var t = 0; this.value = null; if (this.parentNode) { this.arrayPath = r.clone(this.parentNode.arrayPath); if (this.parentNode.view && this.parentNode.view.array) { this.arrayPath.push(this.childPos) } } else { this.arrayPath = [] } if (this.view && this.view.inputfield) { e = n(":input", this.el).serializeArray(); r.each(e, function (e) { n('[name="' + c(e.name) + '"]', n(this.el)).val("") }, this) } else if (this.view && this.view.array) { while (this.children.length > 0) { this.removeChild() } } r.each(this.children, function (e) { e.resetValues() }) }; b.prototype.setChildTemplate = function (e) { this.childTemplate = e; e.parentNode = this }; b.prototype.computeInitialValues = function (e, t) { var n = this; var i = null; var s = 1; var o = 0; var l = this.ownerTree.formDesc.tpldata || {}; if (this.parentNode) { this.arrayPath = r.clone(this.parentNode.arrayPath); if (this.parentNode.view && this.parentNode.view.array) { this.arrayPath.push(this.childPos) } } else { this.arrayPath = [] } l.idx = this.arrayPath.length > 0 ? this.arrayPath[this.arrayPath.length - 1] + 1 : this.childPos + 1; l.value = ""; l.getValue = function (t) { return y(n.ownerTree.formDesc, t, n.arrayPath, l, !!e) }; if (this.formElement) { if (this.formElement.id) { this.id = g(this.formElement.id, this.arrayPath) } else if (this.view && this.view.array) { this.id = c(this.ownerTree.formDesc.prefix) + "-elt-counter-" + r.uniqueId() } else if (this.parentNode && this.parentNode.view && this.parentNode.view.array) { this.id = c(this.ownerTree.formDesc.prefix) + "-elt-counter-" + r.uniqueId() } else if (this.formElement.type === "button" || this.formElement.type === "selectfieldset" || this.formElement.type === "question" || this.formElement.type === "buttonquestion") { this.id = c(this.ownerTree.formDesc.prefix) + "-elt-counter-" + r.uniqueId() } if (this.formElement.key) { this.key = g(this.formElement.key, this.arrayPath); this.keydash = this.key.replace(/\./g, "---") } this.name = g(this.formElement.name, this.arrayPath); r.each(["title", "legend", "description", "append", "prepend", "inlinetitle", "helpvalue", "value", "disabled", "placeholder", "readOnly"], function (e) { if (r.isString(this.formElement[e])) { if (this.formElement[e].indexOf("{{values.") !== -1) { this[e] = this.formElement[e].replace(/\{\{values\.([^\}]+)\}\}/g, '{{getValue("$1")}}') } else { this[e] = g(this.formElement[e], this.arrayPath) } if (this[e]) { this[e] = r.template(this[e], l, u) } } else { this[e] = this.formElement[e] } }, this); if (this.formElement.options) { this.options = r.map(this.formElement.options, function (e) { var t = null; if (r.isObject(e) && e.title) { if (e.title.indexOf("{{values.") !== -1) { t = e.title.replace(/\{\{values\.([^\}]+)\}\}/g, '{{getValue("$1")}}') } else { t = g(e.title, n.arrayPath) } return r.extend({}, e, { value: a(e.value) ? e.value : "", title: r.template(t, l, u) }) } else { return e } }) } } if (this.view && this.view.inputfield && this.schemaElement) { if (e) { if (a(f.util.getObjKey(e, this.key))) { this.value = f.util.getObjKey(e, this.key) } } else if (!t) { if (!a(this.value) && a(this.schemaElement["default"])) { this.value = this.schemaElement["default"]; if (r.isString(this.value)) { if (this.value.indexOf("{{values.") !== -1) { this.value = this.value.replace(/\{\{values\.([^\}]+)\}\}/g, '{{getValue("$1")}}') } else { this.value = g(this.value, this.arrayPath) } if (this.value) { this.value = r.template(this.value, l, u) } } this.defaultValue = true } } } else if (this.view && this.view.array) { s = 0; if (e) { s = this.getPreviousNumberOfItems(e, this.arrayPath) } else if (s === 0) { s = 1 } for (o = 0; o < s; o++) { this.appendChild(this.childTemplate.clone()) } } r.each(this.children, function (n) { n.computeInitialValues(e, t) }); if (this.formElement && this.formElement.valueInLegend) { i = this; while (i) { if (i.parentNode && i.parentNode.view && i.parentNode.view.array) { i.legendChild = this; if (i.formElement && i.formElement.legend) { i.legend = g(i.formElement.legend, i.arrayPath); l.idx = i.arrayPath.length > 0 ? i.arrayPath[i.arrayPath.length - 1] + 1 : i.childPos + 1; l.value = a(this.value) ? this.value : ""; i.legend = r.template(i.legend, l, u); break } } i = i.parentNode } } }; b.prototype.getPreviousNumberOfItems = function (e, t) { var n = null; var i = null; var s = null; var o = 0; if (!e) { return 0 } if (this.view.inputfield && this.schemaElement) { n = m(this.formElement.key, t.length); n = g(n, t); i = f.util.getObjKey(e, n); if (!i) { return 0 } s = r.map(this.children, function (n) { return n.getPreviousNumberOfItems(e, t) }); return r.max([r.max(s) || 0, i.length]) } else if (this.view.array) { return this.childTemplate.getPreviousNumberOfItems(e, t) } else { s = r.map(this.children, function (n) { return n.getPreviousNumberOfItems(e, t) }); return r.max(s) || 0 } }; b.prototype.getFormValues = function (e) { var t = {}; if (!this.el) { throw new Error("formNode.getFormValues can only be called on nodes that are associated with a DOM element in the tree") } var s = n(":input", this.el).serializeArray(); s = s.concat(n(":input[type=checkbox]:not(:disabled):not(:checked)", this.el).map(function () { return { name: this.name, value: this.checked } }).get()); if (e) { r.each(s, function (t) { t.name = g(t.name, e) }) } var o = this.ownerTree.formDesc.schema; for (var u = 0; u < s.length; u++) { var a = s[u].name; var l = v(o.properties, a); var c = null; var h = null; if (!l) continue; if (l._jsonform_checkboxes_as_array) { c = a.match(/\[([0-9]*)\]$/); if (c) { a = a.replace(/\[([0-9]*)\]$/, ""); h = f.util.getObjKey(t, a) || []; if (s[u].value === "1") { h.push(l["enum"][parseInt(c[1], 10)]) } f.util.setObjKey(t, a, h); continue } } if (l.type === "boolean") { if (s[u].value === "0") { s[u].value = false } else { s[u].value = !!s[u].value } } if (l.type === "number" || l.type === "integer") { if (r.isString(s[u].value)) { if (!s[u].value.length) { s[u].value = null } else if (!isNaN(Number(s[u].value))) { s[u].value = Number(s[u].value) } } } if (l.type === "string" && s[u].value === "" && !l._jsonform_allowEmpty) { s[u].value = null } if (l.type === "object" && r.isString(s[u].value) && s[u].value.substring(0, 1) === "{") { try { s[u].value = i.parse(s[u].value) } catch (p) { s[u].value = {} } } if (l.type === "object" && (s[u].value === "null" || s[u].value === "")) { s[u].value = null } if (s[u].name && s[u].value !== null) { f.util.setObjKey(t, s[u].name, s[u].value) } } return t }; b.prototype.render = function (e) { var t = this.generate(); this.setContent(t, e); this.enhance() }; b.prototype.setContent = function (e, t) { var r = n(e); var i = t || (this.parentNode ? this.parentNode.el : this.ownerTree.domRoot); var s = null; if (this.el) { n(this.el).replaceWith(r) } else { s = n(i).children().get(this.childPos); if (s) { n(s).before(r) } else { n(i).append(r) } } this.el = r; this.updateElement(this.el) }; b.prototype.updateElement = function (e) { if (this.id) { this.el = n("#" + c(this.id), e).get(0); if (this.view && this.view.getElement) { this.el = this.view.getElement(this.el) } if (this.fieldtemplate !== false && this.view && this.view.fieldtemplate) { this.el = n(this.el).parent().parent(); if (this.prepend || this.prepend) { this.el = this.el.parent() } this.el = this.el.get(0) } if (this.parentNode && this.parentNode.view && this.parentNode.view.childTemplate) { this.el = n(this.el).parent().get(0) } } r.each(this.children, function (t) { t.updateElement(this.el || e) }) }; b.prototype.generate = function () { var e = { id: this.id, keydash: this.keydash, elt: this.formElement, schema: this.schemaElement, node: this, value: a(this.value) ? this.value : "", escape: l }; var t = null; var n = ""; if (this.ownerTree.formDesc.onBeforeRender) { this.ownerTree.formDesc.onBeforeRender(e, this) } if (this.view.onBeforeRender) { this.view.onBeforeRender(e, this) } if (this.template) { t = this.template } else if (this.formElement && this.formElement.template) { t = this.formElement.template } else { t = this.view.template } if (this.fieldtemplate !== false && (this.fieldtemplate || this.view.fieldtemplate)) { t = f.fieldTemplate(t) } if (this.parentNode && this.parentNode.view && this.parentNode.view.childTemplate) { t = this.parentNode.view.childTemplate(t) } var i = ""; r.each(this.children, function (e) { i += e.generate() }); e.children = i; e.fieldHtmlClass = ""; if (this.ownerTree && this.ownerTree.formDesc && this.ownerTree.formDesc.params && this.ownerTree.formDesc.params.fieldHtmlClass) { e.fieldHtmlClass = this.ownerTree.formDesc.params.fieldHtmlClass } if (this.formElement && typeof this.formElement.fieldHtmlClass !== "undefined") { e.fieldHtmlClass = this.formElement.fieldHtmlClass } n = r.template(t, e, o); return n }; b.prototype.enhance = function () { var e = this; var t = null; var i = null; var s = r.clone(this.ownerTree.formDesc.tpldata) || {}; if (this.formElement) { if (this.view.onInsert) { this.view.onInsert({ target: n(this.el) }, this) } t = this.handlers || this.formElement.handlers; i = this.onInsert || this.formElement.onInsert; if (i) { i({ target: n(this.el) }, this) } if (t) { r.each(t, function (e, t) { if (t === "insert") { e({ target: n(this.el) }, this) } }, this) } if (this.el) { if (this.onChange) n(this.el).bind("change", function (t) { e.onChange(t, e) }); if (this.view.onChange) n(this.el).bind("change", function (t) { e.view.onChange(t, e) }); if (this.formElement.onChange) n(this.el).bind("change", function (t) { e.formElement.onChange(t, e) }); if (this.onClick) n(this.el).bind("click", function (t) { e.onClick(t, e) }); if (this.view.onClick) n(this.el).bind("click", function (t) { e.view.onClick(t, e) }); if (this.formElement.onClick) n(this.el).bind("click", function (t) { e.formElement.onClick(t, e) }); if (this.onKeyUp) n(this.el).bind("keyup", function (t) { e.onKeyUp(t, e) }); if (this.view.onKeyUp) n(this.el).bind("keyup", function (t) { e.view.onKeyUp(t, e) }); if (this.formElement.onKeyUp) n(this.el).bind("keyup", function (t) { e.formElement.onKeyUp(t, e) }); if (t) { r.each(t, function (t, r) { if (r !== "insert") { n(this.el).bind(r, function (n) { t(n, e) }) } }, this) } } if (this.legendChild && this.legendChild.formElement) { n(this.legendChild.el).bind("keyup", function (t) { if (e.formElement && e.formElement.legend && e.parentNode) { e.legend = g(e.formElement.legend, e.arrayPath); s.idx = e.arrayPath.length > 0 ? e.arrayPath[e.arrayPath.length - 1] + 1 : e.childPos + 1; s.value = n(t.target).val(); e.legend = r.template(e.legend, s, u); n(e.parentNode.el).trigger("legendUpdated") } }) } } r.each(this.children, function (e) { e.enhance() }) }; b.prototype.insertArrayItem = function (e, t) { var n = 0; if (e === undefined) { e = this.children.length } var r = this.childTemplate.clone(); this.appendChild(r); r.resetValues(); for (n = this.children.length - 2; n >= e; n--) { this.children[n].moveValuesTo(this.children[n + 1]) } this.children[e].resetValues(); this.children[e].computeInitialValues(); for (n = e; n < this.children.length; n++) { this.children[n].render(t) } }; b.prototype.deleteArrayItem = function (e) { var t = 0; var n = null; if (e === undefined) { e = this.children.length - 1 } for (t = e; t < this.children.length - 1; t++) { this.children[t + 1].moveValuesTo(this.children[t]); this.children[t].render() } this.removeChild() }; b.prototype.getArrayBoundaries = function () { var e = { minItems: -1, maxItems: -1 }; if (!this.view || !this.view.array) return e; var t = function (e, n) { var i = null; var s = null; var o = { minItems: -1, maxItems: -1 }; n = n || e; if (e.view && e.view.array && e !== n) { return o } if (e.key) { s = e.key.replace(/\[[0-9]+\]/g, "[]"); if (e !== n) { s = s.replace(/\[\][^\[\]]*$/, "") } i = v(e.ownerTree.formDesc.schema.properties, s); if (!i) return o; return { minItems: i.minItems || i.minLength || -1, maxItems: i.maxItems || i.maxLength || -1 } } else { r.each(e.children, function (e) { var r = t(e, n); if (r.minItems !== -1) { if (o.minItems !== -1) { o.minItems = Math.max(o.minItems, r.minItems) } else { o.minItems = r.minItems } } if (r.maxItems !== -1) { if (o.maxItems !== -1) { o.maxItems = Math.min(o.maxItems, r.maxItems) } else { o.maxItems = r.maxItems } } }) } return o }; return t(this) }; var w = function () { this.eventhandlers = []; this.root = null; this.formDesc = null }; w.prototype.initialize = function (e) { e = e || {}; this.formDesc = r.clone(e); this.formDesc.prefix = this.formDesc.prefix || "jsonform-" + r.uniqueId(); if (this.formDesc.schema && !this.formDesc.schema.properties) { this.formDesc.schema = { properties: this.formDesc.schema } } this.formDesc.form = this.formDesc.form || ["*", { type: "actions", items: [{ type: "submit", value: "Submit" }] }]; this.formDesc.form = r.isArray(this.formDesc.form) ? this.formDesc.form : [this.formDesc.form]; this.formDesc.params = this.formDesc.params || {}; this.root = new b; this.root.ownerTree = this; this.root.view = f.elementTypes["root"]; this.buildTree(); this.computeInitialValues() }; w.prototype.buildTree = function () { r.each(this.formDesc.form, function (e) { if (e === "*") { r.each(this.formDesc.schema.properties, function (e, t) { this.root.appendChild(this.buildFromLayout({ key: t })) }, this) } else { if (r.isString(e)) { e = { key: e } } this.root.appendChild(this.buildFromLayout(e)) } }, this) }; w.prototype.buildFromLayout = function (e, t) { var n = null; var i = new b; var s = null; var o = null; e = r.clone(e); if (e.items) { if (r.isArray(e.items)) { e.items = r.map(e.items, r.clone) } else { e.items = [r.clone(e.items)] } } if (e.key) { n = v(this.formDesc.schema.properties, e.key); if (!n) { throw new Error('The JSONForm object references the schema key "' + e.key + '" but that key does not exist in the JSON schema') } if (this.formDesc.onElementSchema) { this.formDesc.onElementSchema(e, n) } e.name = e.name || e.key; e.title = e.title || n.title; e.description = e.description || n.description; e.readOnly = e.readOnly || n.readOnly || e.readonly || n.readonly; if (!e.id) { e.id = c(this.formDesc.prefix) + "-elt-" + e.key } if (e.allowEmpty) { n._jsonform_allowEmpty = true } if (!e.type) { if (n.type === "string" && n.format === "color") { e.type = "color" } else if ((n.type === "number" || n.type === "integer" || n.type === "string" || n.type === "any") && !n["enum"]) { e.type = "text" } else if (n.type === "boolean") { e.type = "checkbox" } else if (n.type === "object") { if (n.properties) { e.type = "fieldset" } else { e.type = "textarea" } } else if (!r.isUndefined(n["enum"])) { e.type = "select" } else { e.type = n.type } } if (!e.options && n["enum"]) { if (e.titleMap) { e.options = r.map(n["enum"], function (t) { return { value: t, title: e.titleMap[t] || t } }) } else { e.options = n["enum"] } } if (e.type === "checkboxes" && n.items) { var u = n.items["enum"]; if (u) { n.items._jsonform_checkboxes_as_array = true } if (!u && n.items[0]) { u = n.items[0]["enum"]; if (u) { n.items[0]._jsonform_checkboxes_as_array = true } } } if (n.type === "object") { r.each(n.properties, function (t, n) { i.appendChild(this.buildFromLayout({ key: e.key + "." + n })) }, this) } } if (!e.type) { e.type = "none" } s = f.elementTypes[e.type]; if (!s) { throw new Error('The JSONForm contains an element whose type is unknown: "' + e.type + '"') } if (n) { if (!s.inputfield && !s.array && e.type !== "selectfieldset" && n.type !== "object") { throw new Error("The JSONForm contains an element that links to an " + 'element in the JSON schema (key: "' + e.key + '") ' + 'and that should not based on its type ("' + e.type + '")') } } else { if (s.inputfield && e.type !== "selectfieldset") { throw new Error("The JSONForm defines an element of type " + '"' + e.type + '" ' + 'but no "key" property to link the input field to the JSON schema') } } e.iddot = c(e.id || ""); i.formElement = e; i.schemaElement = n; i.view = s; i.ownerTree = this; if (!e.handlers) { e.handlers = {} } if (i.view.array) { if (e.items) { o = e.items[0] || e.items } else { o = e.key + "[]" } if (r.isString(o)) { o = { key: o } } i.setChildTemplate(this.buildFromLayout(o)) } else if (e.items) { r.each(e.items, function (e) { if (r.isString(e)) { e = { key: e } } i.appendChild(this.buildFromLayout(e)) }, this) } return i }; w.prototype.computeInitialValues = function () { this.root.computeInitialValues(this.formDesc.value) }; w.prototype.render = function (e) { if (!e) return; this.domRoot = e; this.root.render(); if (this.hasRequiredField()) { n(e).addClass("jsonform-hasrequired") } }; w.prototype.forEachElement = function (e) { var t = function (n) { for (var r = 0; r < n.children.length; r++) { e(n.children[r]); t(n.children[r]) } }; t(this.root) }; w.prototype.validate = function (e) { var r = f.getFormValue(this.domRoot); var i = false; var s = this.formDesc; if (s.validate !== false) { var o = false; if (typeof s.validate != "object") { if (t.JSONFormValidator) { o = t.JSONFormValidator.createEnvironment("json-schema-draft-03") } } else { o = s.validate } if (o) { var u = o.validate(r, this.formDesc.schema); n(this.domRoot).jsonFormErrors(false, s); if (u.errors.length) { if (!i) i = []; i = i.concat(u.errors) } } } if (i && !e) { if (s.displayErrors) { s.displayErrors(i, this.domRoot) } else { n(this.domRoot).jsonFormErrors(i, s) } } return { errors: i } }; w.prototype.submit = function (e) { var t = function () { if (e) { e.preventDefault(); e.stopPropagation() } return false }; var n = f.getFormValue(this.domRoot); var r = this.formDesc; var i = false; this.forEachElement(function (t) { if (i) return; if (t.view.onSubmit) { i = !t.view.onSubmit(e, t) } }); if (i) return t(); var s = this.validate(); if (r.onSubmit && !r.onSubmit(s.errors, n)) { return t() } if (s.errors) return t(); if (r.onSubmitValid && !r.onSubmitValid(n)) { return t() } return false }; w.prototype.hasRequiredField = function () { var e = function (t) { if (!t) return null; if (t.required && t.type !== "boolean") { return t } var n = r.find(t.properties, function (t) { return e(t) }); if (n) { return n } if (t.items) { if (r.isArray(t.items)) { n = r.find(t.items, function (t) { return e(t) }) } else { n = e(t.items) } if (n) { return n } } }; return e(this.formDesc.schema) }; f.getFormValue = function (e) { var t = n(e).data("jsonform-tree"); if (!t) return null; return t.root.getFormValues() }; n.fn.jsonFormErrors = function (e, t) { n(".error", this).removeClass("error"); n(".warning", this).removeClass("warning"); n(".jsonform-errortext", this).hide(); if (!e) return; var r = []; for (var i = 0; i < e.length; i++) { var s = e[i].uri.replace(/.*#\//, "").replace(/\//g, ".").replace(/\.([0-9]+)(?=\.|$)/g, "[$1]"); var o = ".jsonform-error-" + c(s.replace(/\./g, "---")); r.push(o); var u = e[i].type || "error"; n(o, this).addClass(u); n(o + " .jsonform-errortext", this).html(e[i].message).show() } r = r.join(","); var a = n(r).get(0); if (a && a.scrollIntoView) { a.scrollIntoView(true, { behavior: "smooth" }) } }; n.fn.jsonForm = function (e) { var t = this; e = r.defaults({}, e, { submitEvent: "submit" }); var s = new w; s.initialize(e); s.render(t.get(0)); if (e.transloadit) { t.append('<input type="hidden" name="params" value=\'' + l(i.stringify(e.transloadit.params)) + "'>") } t.data("jsonform-tree", s); if (e.submitEvent) { t.unbind(e.submitEvent + ".jsonform"); t.bind(e.submitEvent + ".jsonform", function (e) { s.submit(e) }) } h(t); n(".expandable > div, .expandable > fieldset", t).hide(); n(".expandable > legend", t).click(function () { var e = n(this).parent(); e.toggleClass("expanded"); n("> div", e).slideToggle(100) }); return s }; n.fn.jsonFormValue = function () { return f.getFormValue(this) }; t.JSONForm = t.JSONForm || { util: {} }; t.JSONForm.getFormValue = f.getFormValue; t.JSONForm.fieldTemplate = f.fieldTemplate; t.JSONForm.fieldTypes = f.elementTypes; t.JSONForm.getInitialValue = y; t.JSONForm.util.getObjKey = f.util.getObjKey; t.JSONForm.util.setObjKey = f.util.setObjKey })(typeof exports !== "undefined", typeof exports !== "undefined" ? exports : window, typeof jQuery !== "undefined" ? jQuery : { fn: {} }, typeof _ !== "undefined" ? _ : null, JSON)